services:
  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - ./deploy-local/init.nginx.conf:/etc/nginx/nginx.conf
      - ./deploy-local/secure.nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - edc

  edc:
#    image: acrmegabits.azurecr.io/megabits-mds-edc
    build:
      context: ./launchers
      dockerfile: Dockerfile
      args:
        RUNTIME: connector-vault-postgresql
    environment:
      # Participant Configuration
      EDC_PARTICIPANT_ID: ${EDC_PARTICIPANT_ID:-my_participant_id}
      EDC_COMPONENT_ID: "${EDC_PARTICIPANT_ID:-my_participant_id}_MDS_COMPONENT"

      # OAuth and IAM Configuration
      EDC_OAUTH_TOKEN_URL: ${DAPS_URL}/token
      EDC_OAUTH_CLIENT_ID: ${EDC_OAUTH_CLIENT_ID:-my_client_id}
      EDC_OAUTH_PRIVATE_KEY_ALIAS: "daps-private-key"
      EDC_OAUTH_CERTIFICATE_ALIAS: "daps-public-key"
      EDC_OAUTH_PROVIDER_JWKS_URL: ${DAPS_URL}/certs
      EDC_IAM_TOKEN_SCOPE: "idsc:IDS_CONNECTOR_ATTRIBUTES_ALL"
      EDC_OAUTH_PROVIDER_AUDIENCE: ${DAPS_URL}/token
      EDC_OAUTH_ENDPOINT_AUDIENCE: "idsc:IDS_CONNECTORS_ALL"
      EDC_AGENT_IDENTITY_KEY: "referringConnector"

      # Vault Configuration
      EDC_VAULT_NAME: ${EDC_VAULT_NAME}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}

      # Database Configuration
      EDC_DATASOURCE_DEFAULT_URL: "jdbc:postgresql://postgres:5432/edc?currentSchema=mds_edc_schema"
      EDC_DATASOURCE_DEFAULT_USER: ${POSTGRES_USER:-edc}
      EDC_DATASOURCE_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD:-password}
      ORG_ECLIPSE_TRACTUSX_EDC_POSTGRESQL_MIGRATION_SCHEMA: "mds_edc_schema"

      # Web Server Configuration
      WEB_HTTP_PATH: "/api"
      WEB_HTTP_PORT: "8181"
      WEB_HTTP_CONTROL_PATH: "/api/control"
      WEB_HTTP_CONTROL_PORT: "8186"
      WEB_HTTP_MANAGEMENT_PATH: "/api/management"
      WEB_HTTP_MANAGEMENT_PORT: "8182"
      WEB_HTTP_MANAGEMENT_AUTH_TYPE: "tokenbased"
      WEB_HTTP_MANAGEMENT_AUTH_KEY: ${EDC_MANAGEMENT_API_KEY:-myApiKey}

      WEB_HTTP_PROTOCOL_PATH: "/api/dsp"
      WEB_HTTP_PROTOCOL_PORT: "8183"
      WEB_HTTP_VERSION_PATH: "/api/version"
      WEB_HTTP_VERSION_PORT: "8184"
      WEB_HTTP_PUBLIC_PATH: "/public"
      WEB_HTTP_PUBLIC_PORT: "8185"

      EDC_DSP_CALLBACK_ADDRESS: "https://${EDC_HOSTNAME}/api/dsp"
      EDC_DATAPLANE_API_PUBLIC_BASEURL: "https://${EDC_HOSTNAME}/public"

      # HTTP client
      EDC_HTTP_CLIENT_HTTPS_ENFORCE: "true"

      # Transfer Proxy Configuration
      EDC_TRANSFER_PROXY_TOKEN_VERIFIER_PUBLICKEY_ALIAS: "transfer-proxy-token-signer-public-key"
      EDC_TRANSFER_PROXY_TOKEN_SIGNER_PRIVATEKEY_ALIAS: "transfer-proxy-token-signer-private-key"

      # Logging House Configuration
      EDC_LOGGINGHOUSE_EXTENSION_ENABLED: "true"
      EDC_LOGGINGHOUSE_EXTENSION_URL: ${LOGGING_HOUSE_URL}
      EDC_DATASOURCE_LOGGINGHOUSE_URL: "jdbc:postgresql://postgres:5432/edc?currentSchema=mds_edc_schema"
      EDC_DATASOURCE_LOGGINGHOUSE_USER: ${POSTGRES_USER:-edc}
      EDC_DATASOURCE_LOGGINGHOUSE_PASSWORD: ${POSTGRES_PASSWORD:-password}

    ports:
      - "8181:8181"  # API
      - "8186:8186"  # Control
      - "8182:8182"  # Management
      - "8183:8183"  # Protocol
      - "8184:8184"  # Version
      - "8185:8185"  # Public
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17.4
    environment:
      POSTGRES_DB: edc
      POSTGRES_USER: ${POSTGRES_USER:-edc}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-edc}"]
      interval: 10s
      timeout: 5s
      retries: 5

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres-data:
